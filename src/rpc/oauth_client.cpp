/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "oauth.h"
#include "../client_driver/operations_parser/operations_parser.hpp"
#include "../client_driver/operations/operation.hpp"
#include "../client_driver/operations_processor/operations_processor.hpp"

void oauth_protocol_1(char *host)
{
	CLIENT *clnt;
	char **result_1;
	char *request_authorization_1_arg;
	access_token_t *result_2;
	access_token_request_t request_access_token_1_arg;
	char **result_3;
	delegated_action_request_t validate_delegated_action_1_arg;
	char **result_4;
	request_authorization_t approve_request_token_1_arg;
	access_token_t *result_5;
	access_token_t refresh_access_1_arg;

#ifndef DEBUG
	clnt = clnt_create(host, OAUTH_PROTOCOL, OAUTH_VERSION, "udp");
	if (clnt == NULL)
	{
		clnt_pcreateerror(host);
		exit(1);
	}
#endif /* DEBUG */

	result_1 = request_authorization_1(&request_authorization_1_arg, clnt);
	if (result_1 == (char **)NULL)
	{
		clnt_perror(clnt, "call failed");
	}
	result_2 = request_access_token_1(&request_access_token_1_arg, clnt);
	if (result_2 == (access_token_t *)NULL)
	{
		clnt_perror(clnt, "call failed");
	}
	result_3 = validate_delegated_action_1(&validate_delegated_action_1_arg, clnt);
	if (result_3 == (char **)NULL)
	{
		clnt_perror(clnt, "call failed");
	}
	result_4 = approve_request_token_1(&approve_request_token_1_arg, clnt);
	if (result_4 == (char **)NULL)
	{
		clnt_perror(clnt, "call failed");
	}
	result_5 = refresh_access_1(&refresh_access_1_arg, clnt);
	if (result_5 == (access_token_t *)NULL)
	{
		clnt_perror(clnt, "call failed");
	}
#ifndef DEBUG
	clnt_destroy(clnt);
#endif /* DEBUG */
}

int main(int argc, char *argv[])
{
	if (argc < 3)
	{
		printf("Wrong usage. Usage: %s <client_addr> <operation_file>\n", argv[0]);
		exit(1);
	}

	OperationsParser *operations_parser = new OperationsParser(argv[2]);
	std::vector<Operation *> operations = operations_parser->parse_operations();

	OperationProcessor *operation_processor = new OperationProcessor(operations);
	operation_processor->process_operations();

	exit(0);
}
